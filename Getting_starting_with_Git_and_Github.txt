Module 1
Course Introduction:
	- Welcome to this introductory course on Git and GitHub. Git and GitHub are widely used in the industry for version control, and collaborative software development. Version control, and collaboration software are crucial for completing software development projects effective, employers expect skills in git and GitHub for software development careers. This course suits anyone who wants to learn version control and collaboration with git and GitHub. No prior background knowledge is required, just basic computer and IT literacy. This course is particularly suitable for those interested in roles, such as software engineers, application developers, data scientists, and data engineers. We're excited that you're here, your instructors for this course are Rav Ahuja and Upkar Leader. Rav Ahuja is a Global Program Director at IBM, and leads growth strategy, curriculum creation, and partner programs for the IBM Skills Network. Upkar Lidder, is a Senior Product Manager, with 15 plus years of experience, in IT development, including team management, and functional and technical leadership roles. When you complete this course, you will understand basic git and GitHub concepts in the context of distributed version control. You will be able to create, repositories, collaborate on team projects by sharing and integrating your changes, and even build a GitHub portfolio. Now, let's look at what you will learn from the four modules in this course. The first module begins with the basics of Git and GitHub, It covers repositories, and how to edit and push files in GitHub. This module will also introduce you to GitHub branches, as part of hands on activities, you will create a GitHub account and a project repository. You will also create branches and merge a pull request, on the Web user interface. In module two, you will learn about git workflow and Git commands, you'll also learn to use branches, fork and clone public repositories, and collaborate using Git commands. As part of hands on activities, you will use cloning and forking, in a GitHub project. In module three, you'll consolidate your learning with a two part final project, one based on the GitHub user interface or UI, and the other on the Git command line interface, or CLI. You'll apply your knowledge by creating a GitHub project, adding commiting, and pushing files and sharing the project publicly. After your project submission, you will evaluate your peers projects based on a rubric, that will be provided to you. Additionally, you'll explore an optional topic on GitHub Copilot, In the final module, you'll explore optional topics on using GitHub from your Windows desktop. You will learn to install Git Bash, generate an SSH key, and add it to GitHub, to get the most from your course. Watch all videos, complete the hands on activities to practice your new skills, attempt all quizzes, complete the final project, and create your Shareable portfolio. Remember to use the discussion forum to connect and collaborate with your peers, or seek assistance from the core staff. Let's get started on this exciting journey.
	
Overview of Git and GitHub:
	- Welcome to overview of Git and GitHub. In this video, you will explain what Git and GitHub are, along with some basic terms related to get and GitHub. You will also grasp the concept of the version control system and how it is related to Git and GitHub. Git and GitHub are popular environments among developers and data scientists, but you can't discuss them without a basic understanding of version control. A version control system lets you track your changes to the source code. This makes it easy for you to recover older versions of your document if you make a mistake. Along with this, it makes collaboration with other team members much easier. Here's an example to illustrate how version controls work. Let's say you have a shopping list and want your roommates to confirm the things you need and add additional items. Without version control, you've got a big mess to clean up before you can go shopping, with version control you know exactly what you need after everyone has contributed their ideas. Git is free and open source software distributed under the General Public license or GNU. Git, is a distributed version control system, or DVCS, meaning users anywhere in the world can have a copy of your project on their computer. When they've made changes, they can sync their version to a remote server to share it with you. Git isn't the only version control system out there but the distributed aspect is one of the main reasons it has become one of the most popular version control systems available. Version control systems are widely used for things involving code, but you can also version control images, documents, and any number of file types. Note that Git also supports branching strategies such as feature branching to organize and manage development. You can use Git without a web interface using your command lined interface but GitHub is one of the most popular web hosted services for Git repositories. Others include Git Lab, Bitbucket, and Beanstock. There are a few basic terms that you will need to know before you get started. The secure shell or SSH protocol is a method for secure remote login from one computer to another. A repository contains your project folders that are set up for version control. A fork is a copy of a repository. A pull request is how you request that someone review and approve your changes before they become final. A working directory contains the files and subdirectories on your computer that are associated with a Git repository. Commit is a snapshot of the project's current state at a specific point in time along with a description of the changes made. A branch is a separate line of development that allows you to work on features or fixes independently. Merging combines changes from one branch into another, typically merging a feature branch into the main branch. Cloning creates a local copy of a remote Git repository on your computer. Let's recap. In this video, you'll learn that Git is a versatile version control system used for tracking changes in code and collaborating with others on software projects. Due to a distributed version control system, Git enables you to revert to the previous state or review the history of the project. Git supports branching strategies such as feature branching to organize and manage development. GitHub is one of the most popular web hosted services for Git repositories. Basic terms associated with Git and GitHub are SSH, protocol repository, fork, pull request, working directory, commit, branch, merge and clone.
	
Introduction to Github:
	- 
GitHub Reporsitories:
	-
Github- Getting Started:
	- In the previous video, you learned about Git  and GitHub. Before you continue with this video,   register for a GitHub account and log in.  Let’s start by creating a new repository.   Click + then click New Repository. To  create a new repository, you need to provide   these details: give your new repository a name;  optionally, add a description of your repository;   choose the repository visibility - whether you  want it to be public or private; and choose the option   to Initialize this repository with readme file. Then click Create Repository.
	- You will now be redirected to the  repository you have created.   The root folder of your repository is listed  by default and it has just one file ReadMe.md.  
	- Now, it’s time to edit the readme. You can do this  in your browser. Just click the pencil to open the   online editor and you can change the text of the  readme. To save your changes to the repository,   you must commit them. After you have made your  changes, scroll down to the Commit changes   section. Add a commit message and optionally add  a description, then click Commit changes. The   "commit changes" is used to save your changes  to the repository. Go back to the home screen by   clicking the repository name link. Note that the  readme file is updated and verify your changes.  
	- Let’s learn how to create a new file using the  built-in web editor provided by GitHub which   runs in the browser. Click Add File, then  click Create New File to create the new file.  
	- To create a python file called firstpython.py.   First, provide the file name. Next, add a comment  that describes your code, then add the code.  
	- Once finished, commit the change to the  repository. You can see that your file is   now added to the repository and the repository  listing shows when the file was added or changed.   When you need to change the  file, you can edit it again.   Click the file name, and then click the pencil  icon, make your edits and commit the changes.  
	- You can also upload a file from your  local system into the repository.   From the home screen of the repository, click  Add File and choose the Upload files option.  
	- Click Choose Your Files and select the files  you want to upload from your local system.  
	- The file upload process may take a short time,   depending on what you are uploading.  Once the files finish uploading,   click Commit Changes. The repository now reflects  the files that were uploaded. In this video,   you learned how to create a repository, edit  files, and commit changes using the web interface.